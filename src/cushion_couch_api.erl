%%%-------------------------------------------------------------------
%%% Copyright 2010 Samuel Rivas <samuelrivas@gmail.com>
%%%
%%% This file is part of Cushion.
%%%
%%% Cushion is free software: you can redistribute it and/or modify it under
%%% the terms of the GNU General Public License as published by the Free
%%% Software Foundation, either version 3 of the License, or (at your option)
%%% any later version.
%%%
%%% Cushion is distributed in the hope that it will be useful, but WITHOUT ANY
%%% WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
%%% FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
%%% details.
%%%
%%% You should have received a copy of the GNU General Public License along with
%%% Cushion.  If not, see <http://www.gnu.org/licenses/>.
%%%-------------------------------------------------------------------
%%%-------------------------------------------------------------------
%%% @author Samuel <samuelrivas@gmail.com>
%%% @copyright (C) 2010, Samuel
%%% @doc This module contains functions that map directly to CouchDB api.
%%%
%%% See [http://wiki.apache.org/couchdb/API_Cheatsheet] for a quick reference.
%%%
%%% All functions in this module return the raw response from CouchDB.
%%%
%%% @end
%%%-------------------------------------------------------------------

%%% XXX So far, this is basically a huge copy'n paste work. After the first wave
%%% of tests are finished, this is going to be heavily refactorised

-module(cushion_couch_api).

-export([get_document/4, create_document/4, update_document/5,
	 delete_document/5, create_db/3, delete_db/3]).

%%--------------------------------------------------------------------
%% @doc Fetch a document.
%% @spec get_document(string(), integer(), string(), string()) -> binary()
%% @throws {couchdb_error, {ErrorCode::integer(), Body::binary()}}
%% @end
%%--------------------------------------------------------------------
get_document(Couch, Port, Db, DocId) ->
    http_get(Couch, Port, path(Db, DocId)).

%%--------------------------------------------------------------------
%% @doc Create a new document with autogenerated Id.
%%
%% In general, it's better to use {@link update_document/5} to create new
%% documents. This call performs a POST call that could be problematic in
%% certain network configurations.
%%
%% @spec create_document(string(), integer(), string(),
%%                       deep_string()) -> binary()
%% @throws {couchdb_error, {ErrorCode::integer(), Body::binary()}}
%% @end
%%--------------------------------------------------------------------
create_document(Couch, Port, Db, Fields) ->
    http_post(Couch, Port, Db, Fields).

%%--------------------------------------------------------------------
%% @doc Create a new document or update an existing one
%%
%% Creates a new document in the database if `DocId' doesn't already exist. If
%% it exists, then it is updated to `Fields' if, and only if, there is a `_rev'
%% field and its value is the same as the current `_rev' value of the document
%% stored in the DB.
%%
%% @spec update_document(string(), integer(), string(), string(),
%%                       deep_string()) -> binary()
%% @throws {couchdb_error, {ErrorCode::integer(), Body::binary()}}
%% @end
%%--------------------------------------------------------------------
update_document(Couch, Port, Db, DocId, Fields) ->
    http_put(Couch, Port, path(Db, DocId), Fields).

%%--------------------------------------------------------------------
%% @doc Delete a document
%% @spec delete_document(string(), integer(), string(), string(), string()) ->
%%                       binary()
%% @throws {couchdb_error, {ErrorCode::integer(), Body::binary()}}
%% @end
%%--------------------------------------------------------------------
delete_document(Couch, Port, Db, DocId, Rev) ->
    {Result, Body} = request(Couch, Port, "DELETE", path(Db, DocId, Rev)),
    check_result(200, Result, Body).

%%--------------------------------------------------------------------
%% @doc Create a new database
%%
%% @spec create_db(string(), integer(), string()) -> binary()
%% @throws {couchdb_error, {ErrorCode::integer(), Body::binary()}}
%% @end
%%--------------------------------------------------------------------
create_db(Couch, Port, Db) ->
    http_put(Couch, Port, Db).

%%--------------------------------------------------------------------
%% @doc Delete and existing database
%%
%% @spec delete_db(string(), integer(), string()) -> binary()
%% @throws {couchdb_error, {ErrorCode::integer(), Body::binary()}}
%% @end
%%--------------------------------------------------------------------
delete_db(Couch, Port, Db) ->
    {Result, Body} = request(Couch, Port, "DELETE", Db),
    check_result(200, Result, Body).

%%%-------------------------------------------------------------------
%%% Internals
%%%-------------------------------------------------------------------
http_put(Couch, Port, Path) ->
    http_put(Couch, Port, Path, "").

http_put(Couch, Port, Path, Payload) ->
    {Result, Body} = request(Couch, Port, "PUT", Path, Payload),
    check_result(201, Result, Body).

http_get(Couch, Port, Path) ->
    {Result, Body} = request(Couch, Port, "GET", Path),
    check_result(200, Result, Body).

http_post(Couch, Port, Path, Payload) ->
    {Result, Body} = request(Couch, Port, "POST", Path, Payload),
    check_result(201, Result, Body).

request(Couch, Port, Method, Path) ->
    request(Couch, Port, Method, Path, "").

request(Couch, Port, Method, Path, Payload) ->
    Url = cushion_util:format("http://~s:~w/~s", [Couch, Port, Path]),
    {ok, {Result, _Headers, Body}} =
	lhttpc:request(
          Url, Method, [{"Content-Type", "application/json"}], Payload,
          infinity),
    {Result, Body}.

check_result(Expected, Result, Body) ->
    case Result of
        {Expected, _} ->
            Body;
        {ErrorCode, _} ->
            couch_error(Body, ErrorCode)
    end.

couch_error(Body, ErrorCode) ->
   throw({couchdb_error, {ErrorCode, Body}}).

path(Db, File) ->
    filename:join(Db, File).

path(Db, File, Rev) ->
    io_lib:format("~s?rev=~s", [path(Db, File), Rev]).
